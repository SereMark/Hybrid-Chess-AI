# Imports (internal use)
import os as _os
import psutil as _psutil
import torch as _torch

# Reproducibility
SEED = 0  # 0 to disable strict reproducibility and allow fastest settings

# Torch / Performance (static)
AMP_ENABLED = True
TORCH_COMPILE_MODE = "max-autotune"
TORCH_MATMUL_FLOAT32_PRECISION = "high"

# Logging / IO
LOG_TO_FILE = True
LOG_FILE_PATH = "logs/train.log"
LOG_LEVEL = "INFO"
CUDA_EMPTY_CACHE_EVERY_ITERS = 120
OPENINGS_FILE_PATH = "openings.txt"
CHECKPOINT_SAVE_EVERY_ITERS = 30
CHECKPOINT_FILE_PATH = "checkpoints/checkpoint.pt"
BEST_MODEL_FILE_PATH = "checkpoints/best_model.pt"
ARENA_LOG_CSV_ENABLE = True
ARENA_LOG_CSV_PATH = "logs/arena_log.csv"
METRICS_LOG_CSV_ENABLE = True
METRICS_LOG_CSV_PATH = "logs/metrics_log.csv"
ARENA_SAVE_PGN_ENABLE = True
ARENA_SAVE_PGN_DIR = "arena_pgns"
ARENA_SAVE_PGN_ON_PROMOTION = True
ARENA_SAVE_PGN_SAMPLES_PER_ROUND = 4


# Board Encoding / Shapes
BOARD_SIZE = 8
NSQUARES = BOARD_SIZE * BOARD_SIZE
PLANES_PER_POSITION = 14
HISTORY_LENGTH = 8
INPUT_PLANES = HISTORY_LENGTH * PLANES_PER_POSITION + 7
POLICY_PLANES = 73
POLICY_OUTPUT = POLICY_PLANES * NSQUARES
NUM_DIRECTIONS = 8
DIR_MAX_DIST = 7
NUM_KNIGHT_DIRS = 8
KNIGHT_PLANES_BASE = 56
PROMO_CHOICES = 3
PROMO_STRIDE = 3
DIR_MAP_MIRROR = [2, 1, 0, 4, 3, 7, 6, 5]
KMAP_MIRROR = [1, 0, 3, 2, 5, 4, 7, 6]
DIR_MAP_ROT180 = [7, 6, 5, 4, 3, 2, 1, 0]
KMAP_ROT180 = [7, 6, 5, 4, 3, 2, 1, 0]
DIR_MAP_VFLIP_CS = [5, 6, 7, 3, 4, 0, 1, 2]
KMAP_VFLIP_CS = [6, 7, 4, 5, 2, 3, 0, 1]
PMAP_PROMOS = [0, 2, 1]
U8_SCALE = 255.0
VALUE_I8_SCALE = 127.0

# Model Architecture
MODEL_BLOCKS = 12
MODEL_CHANNELS = 224
MODEL_VALUE_CONV_CHANNELS = 16
MODEL_VALUE_HIDDEN_DIM = 1024

# Evaluator (inference)
EVAL_BATCH_COALESCE_MS = 22
EVAL_WORKER_JOIN_TIMEOUT_S = 0.15
EVAL_CACHE_USE_FP16 = True

# Self-play / Replay Buffer
GAME_MAX_PLIES = 320
SELFPLAY_TEMP_MOVES = 15
SELFPLAY_TEMP_HIGH = 1.00
SELFPLAY_TEMP_LOW = 0.05
SELFPLAY_DETERMINISTIC_TEMP_EPS = 0.005
SELFPLAY_OPENING_RANDOM_PLIES_MAX = 6

# MCTS (training)
MCTS_TRAIN_SIMULATIONS_BASE = 512
MCTS_TRAIN_SIMULATIONS_MIN = 384
MCTS_TRAIN_SIM_DECAY_MOVE_INTERVAL = 12
MCTS_C_PUCT = 1.35
MCTS_C_PUCT_BASE = 19652.0
MCTS_C_PUCT_INIT = 1.55
MCTS_DIRICHLET_ALPHA = 0.30
MCTS_DIRICHLET_WEIGHT = 0.15
MCTS_FPU_REDUCTION = 0.12
MCTS_VISIT_COUNT_CLAMP = 65535

# Resignation
RESIGN_VALUE_THRESHOLD = -0.85
RESIGN_CONSECUTIVE_PLIES = 3
RESIGN_CONSECUTIVE_MIN = 3
RESIGN_PLAYTHROUGH_FRACTION = 0.33
RESIGN_DISABLE_UNTIL_ITERS = 40

# Sampling / Augmentation
REPLAY_SNAPSHOT_RECENT_WINDOW_FRAC = 0.15
REPLAY_SNAPSHOT_RECENT_RATIO_DEFAULT = 0.6
TRAIN_RECENT_SAMPLE_RATIO = 0.60
AUGMENT_MIRROR_PROB = 0.5
AUGMENT_ROT180_PROB = 0.25
AUGMENT_VFLIP_CS_PROB = 0.25

# Optimization
TRAIN_LR_INIT = 1.8e-3
TRAIN_LR_WARMUP_STEPS = 2000
TRAIN_LR_FINAL = 6.5e-4
TRAIN_WEIGHT_DECAY = 2e-4
TRAIN_MOMENTUM = 0.9
TRAIN_GRAD_CLIP_NORM = 0.80
LOSS_POLICY_WEIGHT = 1.0
LOSS_VALUE_WEIGHT = 0.8
LOSS_VALUE_WEIGHT_LATE = 1.0
LOSS_VALUE_WEIGHT_SWITCH_ITER = 30
LOSS_POLICY_LABEL_SMOOTH = 0.03
LOSS_ENTROPY_COEF_INIT = 1.0e-4
LOSS_ENTROPY_ANNEAL_ITERS = 100
LOSS_ENTROPY_COEF_MIN = 5.0e-05
EMA_ENABLED = True
EMA_DECAY = 0.9995

# Schedule / Iteration
TRAIN_TOTAL_ITERATIONS = 168
SELFPLAY_GAMES_PER_ITER = 360
TRAIN_LR_SCHED_STEPS_PER_ITER_EST = 36
TRAIN_LR_SCHED_DRIFT_ADJUST_THRESHOLD = 15.0
TRAIN_TARGET_TRAIN_SAMPLES_PER_NEW = 3.0
TRAIN_UPDATE_STEPS_MIN = 16
TRAIN_UPDATE_STEPS_MAX = 32

# Arena Evaluation (gating)
MCTS_EVAL_SIMULATIONS = 512
ARENA_EVAL_EVERY_ITERS = 8
ARENA_GAMES_PER_EVAL = 120
ARENA_TEMPERATURE = 0.0
ARENA_TEMP_MOVES = 0
ARENA_DIRICHLET_WEIGHT = 0.0
ARENA_OPENING_TEMPERATURE_EPS = 1e-6
ARENA_DETERMINISTIC = True
ARENA_STRATIFY_OPENINGS = True
ARENA_DRAW_SCORE = 0.50
ARENA_GATE_DRAW_WEIGHT = 0.50
ARENA_GATE_BASELINE_P = 0.5
ARENA_GATE_Z_EARLY = 1.64
ARENA_GATE_Z_LATE = 2.05
ARENA_GATE_Z_SWITCH_ITER = 200
ARENA_GATE_MIN_GAMES = 240
ARENA_GATE_DECISIVE_SECONDARY = True
ARENA_GATE_MIN_DECISIVES = 100
ARENA_CANDIDATE_MAX_ROUNDS = 4
ARENA_CANDIDATE_MAX_GAMES = 600
ARENA_PAIRING_FACTOR = 2
ARENA_GATE_EPS = 1e-9

# Dynamic RAM/Cache/Buffer Tuning
DYN_TUNE_RAM_ENABLED = True
DYN_RAM_LOW_PCT = 55.0
DYN_RAM_HIGH_PCT = 82.0
DYN_TUNE_COOLDOWN_ITERS = 2
DYN_REPLAY_MIN = 80_000
DYN_REPLAY_MAX = 300_000
DYN_REPLAY_STEP = 10_000
DYN_EVAL_MIN = 8_192
DYN_EVAL_MAX = 200_000
DYN_EVAL_STEP = 4_096
DYN_ARENA_EVAL_MIN = 8_192
DYN_ARENA_EVAL_MAX = 131_072
DYN_ARENA_EVAL_STEP = 4_096

# Dynamic Hardware-Based Defaults
def _detect_hardware():
    """Return (cpu_cores, ram_gb, vram_gb)."""
    aff = getattr(_os, "sched_getaffinity", None)
    cpu_cores = len(aff(0)) if callable(aff) else int(_psutil.cpu_count(logical=True) or 1)
    vm = _psutil.virtual_memory()
    ram_gb = float(vm.total) / (1024 ** 3)
    if _torch.cuda.is_available() and _torch.cuda.device_count() > 0:
        vram_gb = float(_torch.cuda.get_device_properties(0).total_memory) / (1024 ** 3)
    else:
        vram_gb = 0.0
    return cpu_cores, ram_gb, vram_gb

_CPU_CORES, _RAM_GB, _VRAM_GB = _detect_hardware()

# Mixed precision and math modes
AMP_PREFER_BFLOAT16 = True
TORCH_ALLOW_TF32 = True

# Memory format
MODEL_CHANNELS_LAST = True
EVAL_MODEL_CHANNELS_LAST = True

# Torch threading
TORCH_THREADS_INTRA = 1
TORCH_THREADS_INTER = 1

# Data loader pin-memory
TRAIN_PIN_MEMORY = bool(_RAM_GB >= 16.0)
EVAL_PIN_MEMORY = bool(_RAM_GB >= 16.0)

# Self-play workers
SELFPLAY_NUM_WORKERS = int(min(32, max(4, _CPU_CORES - 2)))

# Batch sizes
TRAIN_BATCH_SIZE_MIN = 4096
TRAIN_BATCH_SIZE_MAX = 8192
TRAIN_BATCH_SIZE = int(max(TRAIN_BATCH_SIZE_MIN, min(TRAIN_BATCH_SIZE_MAX, int(256 * max(1.0, _VRAM_GB)))))
EVAL_BATCH_SIZE_MAX = int(max(1024, min(8192, int(2048 * (max(1.0, _VRAM_GB) / 16.0)))))

# Cache capacities (scale to available RAM)
_sample_bytes = int((INPUT_PLANES * 8 * 8) + (POLICY_OUTPUT * 2) + 1)
_sample_bytes = int(_sample_bytes * 1.06)  # overhead fudge
_replay_budget = int(min(4 * 1024 ** 3, 0.05 * _RAM_GB * (1024 ** 3)))  # <=4GB or 5% RAM
REPLAY_BUFFER_CAPACITY = int(max(DYN_REPLAY_MIN, min(DYN_REPLAY_MAX, _replay_budget // max(1, _sample_bytes))))

_cache_entry_bytes = int((POLICY_OUTPUT * 2) + 4)
_eval_cache_budget = int(min(1_200_000_000, 0.015 * _RAM_GB * (1024 ** 3)))  # <=~1.2GB or 1.5% RAM
EVAL_CACHE_CAPACITY = int(max(DYN_EVAL_MIN, min(DYN_EVAL_MAX, _eval_cache_budget // max(1, _cache_entry_bytes))))
ARENA_EVAL_CACHE_CAPACITY = int(max(DYN_ARENA_EVAL_MIN, min(DYN_ARENA_EVAL_MAX, EVAL_CACHE_CAPACITY // 2)))

# cuDNN benchmark toggles with reproducibility policy
TORCH_CUDNN_BENCHMARK = bool(SEED == 0)

# Torch compile settings (kept enabled)
TORCH_COMPILE = True
TORCH_COMPILE_FULLGRAPH = True
TORCH_COMPILE_DYNAMIC = True
